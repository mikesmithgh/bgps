#!/bin/bash
#
# A better bash prompt for git. bgps provides a convenient way to customize
# the PS1 prompt and to determine information about the current git branch. 
# bgps can indicate if the branch has a clean or dirty working tree, whether
# or not it is tracking a remote branch, and the number of commits the local
# branch is ahead or behind the remote branch.
# 

# Function Definitions ########################################################

#######################################
# Read contents of file to variables
# Arguments: 
#   $filepath the path of the file to read
#   $variable_names... the name of the variables to store the contents
#######################################
_eread ()
{
  local filepath="${1}"
  shift
  [[ -r "${filepath}" ]] && read "$@" <"${filepath}"
}

#######################################
# Print error message to stderr
# Arguments: $error_message
#######################################
_err() {
  echo "bgps: ${1}" >&2
}

#######################################
# Check if file exists and if file is a regular file
# Arguments: $filepath the path of the file to check
# Returns: 0 on success
#######################################
_file_exists() {
  local return_code=0
  local filepath="${1}"
  if [[ ! -e "${filepath}" ]]; then
    _err "cannot access '${filepath}': No such file"
    return_code=1
  elif [[ ! -f "${filepath}" ]]; then
    _err "cannot access '${filepath}': Not a regular file"
    return_code=1
  fi
  return ${return_code}
}

#######################################
# Remove first and last double quotes from string, if they exist
# Arguments: $no_quote the string to remove quotes from
#######################################
_remove_quotes() {
  local no_quote="${1%\"}"
  echo "${no_quote#\"}"
}

#######################################
# Add configuration to config map
# Globals: $BGPS_CONFIG 
# Arguments:
#   $key the config map key
#   $value the config map value
#######################################
_set_config_value() {
  local valid_config_keys=(
    "GIT_AHEAD"
    "GIT_BEHIND"
    "GIT_COLOR_CLEAN"
    "GIT_COLOR_CONFLICT"
    "GIT_COLOR_DIRTY"
    "GIT_COLOR_ENABLED"
    "GIT_COLOR_NO_UPSTREAM"
    "GIT_COLOR_UNTRACKED"
    "GIT_DIVERGED"
    "GIT_POSTFIX"
    "GIT_PREFIX"
    "PS1_FORMAT"
    "TEXT_COLOR"
  )
  local key="${1^^}"
  local value="${2}"
  for valid_key in "${valid_config_keys[@]}"; do 
    if [[ "${key}" == "${valid_key}" ]] ; then
      # add to config map
      BGPS_CONFIG["${key}"]=$(_remove_quotes "${value}")
    fi
  done
}

#######################################
# Get configuration from config map.
# If a default value is provided and there is no value in the config, then
# return the default value
# Globals: $BGPS_CONFIG 
# Arguments:
#   $key the config map key
#   $default_value the default value if there is no value in the config
#######################################
_get_config_value() {
  local key="${1^^}"
  local default_value="${2}"
  local value="${BGPS_CONFIG[$key]}"
  [[ -z "${value}" ]] && echo "${default_value}" || echo "${value}"
}

#######################################
# Clear all configuration in the config map 
# Globals: $BGPS_CONFIG 
#######################################
_clear_config_values() {
  local keys=("${!BGPS_CONFIG[@]}")
  for key in "${keys[@]}"; do
    unset "BGPS_CONFIG[$key]"
  done
}

#######################################
# Read file and store in global config map
# Globals: $BGPS_CONFIG 
# Arguments: $config_file the configuration filepath 
#######################################
_read_config() {
  local config_file="${1}"
  if _file_exists "${config_file}" ; then
    while IFS=$'=\r\n' read -r key value; do
      _set_config_value "${key}" "${value}"
    done < "${config_file}"
  fi
}

#######################################
# Set the config map by reading the values from the provided file.
# Only read from file if md5sum is different, otherwise hit the cache.
# Globals:
#   $BGPS_CHECKSUM
#   $BGPS_CONFIG 
#   $BGPS_DEFAULT_CONFIG
# Arguments: $config_file the configuration filepath 
# Returns: 0 on success
#######################################
_set_config() {
  local return_code=0
  local config_file="${1}"
  if [[ "${config_file}" == "${BGPS_DEFAULT_CONFIG}" ]] && \
     ! _file_exists "${config_file}" 2>/dev/null
  then
      # default config file does not exist so lets print a shrug face
      BGPS_CHECKSUM="¯\_(ツ)_/¯"
      _clear_config_values
      _set_config_value "PS1_FORMAT" "${BGPS_CHECKSUM}%( %s%) \$ "
  elif _file_exists "${config_file}" ; then
    local hash="$(md5sum ${config_file} | awk {'print $1'})"
    if [[ "${hash}" != "${BGPS_CHECKSUM}" ]] ; then
      BGPS_CHECKSUM="${hash}"
      _clear_config_values
      _read_config "${config_file}" 
    fi
  else
    return_code=1
  fi
  return ${return_code}
}


#######################################
# Pretty print the configuration map
# Globals: $BGPS_CONFIG
#######################################
_print_config() {
  if [[ -v BGPS_CONFIG[@] ]] ; then
    for key in "${!BGPS_CONFIG[@]}"; do 
      printf "%-*s = %s\n" 19 "${key}" "${BGPS_CONFIG[$key]}" 
    done
  fi
}

#######################################
# Get current git branch and additional repository information
# Returns: 0 on success
#######################################
_branch_info() {
  local repo_info
  local rev_parse_exit_code

  repo_info="$(git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD 2>/dev/null)"
  rev_parse_exit_code="${?}"

  if [[ -z "${repo_info}" ]] ; then
    return 1
  fi

  local short_sha
  if (( ! ${rev_parse_exit_code} )) ; then
    short_sha="${repo_info##*$'\n'}"
    repo_info="${repo_info%$'\n'*}"
  fi

  local inside_worktree="${repo_info##*$'\n'}"
  repo_info="${repo_info%$'\n'*}"
  local bare_repo="${repo_info##*$'\n'}"
  repo_info="${repo_info%$'\n'*}"
  local inside_gitdir="${repo_info##*$'\n'}"
  local git_dir="${repo_info%$'\n'*}"

  local merge_status=""
  local branch=""
  local step=""
  local total=""
  if [[ -d "${git_dir}/rebase-merge" ]] ; then

    _eread "${git_dir}/rebase-merge/head-name" branch
    _eread "${git_dir}/rebase-merge/msgnum" step
    _eread "${git_dir}/rebase-merge/end" total

    if [[ -f "${git_dir}/rebase-merge/interactive" ]]; then
      merge_status="|REBASE-i"
    else
      merge_status="|REBASE-m"
    fi

  else

    if [[ -d "${git_dir}/rebase-apply" ]] ; then

      _eread "${git_dir}/rebase-apply/next" step
      _eread "${git_dir}/rebase-apply/last" total

      if [[ -f "${git_dir}/rebase-apply/rebasing" ]] ; then
        _eread "${git_dir}/rebase-apply/head-name" branch
        merge_status="|REBASE"
      elif [[ -f "${git_dir}/rebase-apply/applying" ]] ; then
        merge_status="|AM"
      else
        merge_status="|AM/REBASE"
      fi

    elif [[ -f "${git_dir}/MERGE_HEAD" ]] ; then
      merge_status="|MERGING"
    elif [[ -f "${git_dir}/CHERRY_PICK_HEAD" ]] ; then
      merge_status="|CHERRY-PICKING"
    elif [[ -f "${git_dir}/REVERT_HEAD" ]] ; then
      merge_status="|REVERTING"
    elif [[ -f "${git_dir}/BISECT_LOG" ]] ; then
      merge_status="|BISECTING"
    fi
  
    if [[ "${branch}" ]]; then
      :
    elif [[ -h "${git_dir}/HEAD" ]] ; then
      # symlink symbolic ref
      branch="$(git symbolic-ref HEAD 2>/dev/null)"
    else
      local head=""
      if ! _eread "${git_dir}/HEAD" head ; then
        return 1
      fi
      # is it a symbolic ref?
      branch="${head#ref: }"
      if [[ "${head}" == "${branch}" ]] ; then
        branch="$(git describe --tags --exact-match HEAD 2>/dev/null)" || branch="${short_sha}..."
        branch="(${branch})"
      fi
    fi
  fi
  
  if [[ -n "${step}" ]] && [[ -n "${total}" ]] ; then
    merge_status="${merge_status} ${step}/${total}"
  fi
  
  local prefix=""
  
  if [[ "${inside_gitdir}" == "true" ]] ; then
    if [[ "${bare_repo}" == "true" ]] ; then
      prefix="BARE:"
    else
      branch="GIT_DIR!"
    fi
  fi
  
  branch="${branch##refs/heads/}"
  
  echo "${prefix}${branch}${merge_status}"
  return 0
}

#######################################
# Get git status format
# Globals: 
#   $RESET_COLOR
#   $BGPS_CONFIG 
# Returns: 0 on success
#######################################
_bgps_git_status() {
  local color_enabled="$(_get_config_value 'GIT_COLOR_ENABLED' 'false')"
  local color_clean="$(_get_config_value 'GIT_COLOR_CLEAN' '\[\033[2;92m\]')"
  local color_no_upstream="$(_get_config_value 'GIT_COLOR_NO_UPSTREAM' '\[\033[2;40m\]')"
  local color_untracked="$(_get_config_value 'GIT_COLOR_UNTRACKED' '\[\033[2;95m\]')"
  local color_dirty="$(_get_config_value 'GIT_COLOR_DIRTY' '\[\033[2;91m\]')"
  local color_conflict="$(_get_config_value 'GIT_COLOR_CONFLICT' '\[\033[0;33m\]')"
  local prefix="$(_get_config_value 'GIT_PREFIX' '')"
  local postfix="$(_get_config_value 'GIT_POSTFIX' '')"
  local git_ahead="$(_get_config_value 'GIT_AHEAD' '[ahead %s]')"
  local git_behind="$(_get_config_value 'GIT_BEHIND' '[behind %s]')"
  local git_diverged="$(_get_config_value 'GIT_DIVERGED' '[ahead %a] [behind %b]')"
  local git_color="${RESET_COLOR}"
  local git_symbol=""

  local git_branch
  git_branch="$(_branch_info)"
  if (( ${?} )) ; then
    return 1
  fi

  git diff --no-ext-diff --quiet HEAD 2>/dev/null
  local dirty_exit_code="${?}" # code == 0 clean working tree, code == 1 dirty working tree

  if (( "${dirty_exit_code}" == 0 || "${dirty_exit_code}" == 1 )) ; then

    git ls-files --others --exclude-standard --directory --no-empty-directory --error-unmatch -- ':/*' >/dev/null 2>/dev/null
    local untracked_exit_code="${?}" # code == 0 untracked files exist, code > 0 no untracked files
  
    local commit_counts
    commit_counts=($(git rev-list --left-right --count ...@{u} 2>/dev/null))
    if (( ${?} )) ; then
      # no upstream configured for branch
      git_color="${color_no_upstream}"
    else
      if (( ! ${dirty_exit_code} )) ; then
        git_color="${color_clean}"
      fi
    
      if (( ${commit_counts[0]} )) ; then
        git_color="${color_conflict}"
        git_symbol="${git_ahead/\%s/${commit_counts[0]}}"
      fi
    
      if (( ${commit_counts[1]} )) ; then
        git_color="${color_conflict}"
        git_symbol="${git_behind/\%s/${commit_counts[1]}}"
      fi
    
      if (( ${commit_counts[0]} && ${commit_counts[1]} )) ; then
        git_symbol="${git_diverged/\%a/${commit_counts[0]}}"
        git_symbol="${git_symbol/\%b/${commit_counts[1]}}"
      fi
    fi
    
    if (( ! ${untracked_exit_code} )) ; then
      git_color="${color_untracked}"
      git_symbol="*${git_symbol}"
    fi
  
    if (( ${dirty_exit_code} == 1 )) ; then
      git_color="${color_dirty}"
      git_symbol="*${git_symbol#\*}"
    fi
    
    if [[ ${color_enabled} == "true" ]] ; then
      echo -n "${git_color}"
    fi

  fi

  echo "${prefix:+${prefix}}${git_branch}${git_symbol:+ ${git_symbol}}${postfix:+${postfix}}"
  return 0
}

#######################################
# Set formatted git prompt
# Globals:
#   $RESET_COLOR
#   $BGPS_CONFIG 
#######################################
_bgps_prompt() {
  local format="$(_get_config_value 'PS1_FORMAT')"
  local text_color="$(_get_config_value 'TEXT_COLOR' $(echo ${RESET_COLOR}))"
  local status="$(_bgps_git_status)"
  if [[ -z "${status}" ]] ; then
    format="${format/\%(*\%s*\%)/}"
    format="${format/\%s/}"
    PS1="${format}${text_color}"
  else
    local placeholder
    if [[ "${format}" =~ \%\(.*\%s.*\%\) ]] ; then
      placeholder="${BASH_REMATCH[0]#\%\(}"
      placeholder="${placeholder%\%\)}"
      format="${format/\%(*\%s*\%)/${placeholder}}"
    fi
    PS1="${format/\%s/${status}}${text_color}"
  fi
}

# Script Definition ###########################################################
# Globals:
#   $RESET_COLOR escape sequence to reset prompt color
#   $BGPS_CONFIG map of config values
#   $BGPS_CHECKSUM md5sum of config file
#   $BGPS_DEFAULT_CONFIG default config file filepath

RESET_COLOR="\[\033[0m\]"
declare -A BGPS_CONFIG
BGPS_DEFAULT_CONFIG="${HOME}/.bgps_config"
bgps_config_file="${BGPS_DEFAULT_CONFIG}"
list_config="false"

while [[ $# > 0 ]]; do
  case "${1:2}" in
    "ls-config")
      list_config="true"
      ;;
    "config-file")
      shift
      bgps_config_file="${1}"
      ;;
  esac
  shift
done

if _set_config "${bgps_config_file}" ; then
  if [[ "true" == "${list_config}" ]] ; then
    _print_config
  else 
    _bgps_prompt
  fi
fi

# unset variables and functions
unset RESET_COLOR
unset bgps_config_file
unset list_config
unset -f _err
unset -f _file_exists
unset -f _remove_quotes
unset -f _set_config_value
unset -f _get_config_value
unset -f _clear_config_values
unset -f _read_config
unset -f _set_config
unset -f _print_config
unset -f _bgps_git_status
unset -f _bgps_prompt
